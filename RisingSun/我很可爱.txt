20171213:想在主程序远程注入DFCF后加挂钩子，难度很大，很多意料不到的难题，其中之一
         导致DFCF直接崩溃退出；改为在readDFCF.dll挂钩截获数据。
		 利用IDA无法分析远程注入条件下readDFCF的运行情况。

20171214:远程注入DFCF后在DLL加挂钩子会导致DFCF死机，原因待查。内存访问冲突，已解决。

20171220：1、回调原来的函数出现ESP错误，问题无法解决，暂时采用不回调的模式。采集数据的模式下
          dfcf界面无分笔信息显示。
          2、采用模拟鼠标方式实现自选股数据的自动切换与分笔读取，集成成熟应用即可。
		   问题是要占用桌面。利用模拟鼠标管轮运动可解决如何获取当日早期数据的问题。
		  3、增加获取分笔数据等控制流程，切换股票、等待结果均应加上重发机制，提高可靠性。
		  监视copydata消息，分别获取命令反馈和数据反馈。dfcf终端必须topmost。
		  待验证。
		  Make topmost ::SetWindowPos(hwnd, HWND_TOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE);  
		  Revert back ::SetWindowPos(hwnd, HWND_NOTOPMOST, 0, 0, 0, 0, SWP_NOMOVE | SWP_NOSIZE)
		  4、历史分笔、资金流情况？
		  5、DFCF当前界面状态判断？
		  6、微信接口？
20171221:1、跨模块跳转可行，但不同模块间不能共享函数级别的变量（地址空间不一样？），会引起内存访问
         异常，或者读到错误的数据。
		 2、同一模块内的拦截函数可在取消拦截后调用被拦截函数，一切运行正常。要截获函数的控制权并
		 继续调用原函数，考虑将截获函数放到被截获函数的地址控件执行。试试效果？？？截获函数必须
		 设计成可动态加载的函数，技术难点在何处？
20171229：1）利用嵌入式的汇编保存全部寄存器参数，然后取消Hook再调用原来的函数，可行，但有时还会
		  引起异常，估计是多线程环境下的访问异常所致。
		  2）考虑进一步优化拦截函数，在处理函数内实现被拦截函数的全部功能。  往往在循环处可获得
		  控制机会，后续关键解决变量寻址问题。
20171230：1、此方法不可行，原因是编译器自动进行堆栈的调整导致栈不平衡从而导致数据访问失败。直接跳转
			 进入退出的控制方法太麻烦，暂时放弃。
			 还得考虑debug终端的方法进行类似操作。
		2、考虑获取资金流信息  
20180108:1、利用类内偏移的方法实现控制权的转移，可解决转移出来后的栈平衡问题，同时利用调用约定
             static char __thiscall解决this指针的传递问题；
		 2、呼入拦截：在函数入口处跳转到拦截函数，long  jmp 
		    呼出拦截：在发起函数调用处转换成拦截函数 long call，跨模块call是6字节长度，模块内调用是5字节
			跨模块call：FF 15 60 67 16 05，后字节是目标真实地址，前二是命令字
			模块内call：E8 F0 70 FF FF，后四字节是相对当前位置的偏移量（相对下一跳指令的偏移量）
			改为call模式实现拦截，区分模块内调用和模块间调用，在拦截函数内恢复原来的调用函数，确保数据流
			处理不中断。
20180112:1、考虑处理当日资金流的信息，收集当日增仓信息、实时资金流信息；板块热点、市场热点判断，未来的短期
            操作策略；
         2、利用各种周期的资金流信息进行初选，基于技术面和当日资金流情况确定介入与退出时机；
		 3、价值标的轮动也基于资金流等技术态势确定介入与退出时机。
20180113：计划逐步集成掘金量化C++版本的研究模块，将来计划通过集成http server与聚宽平台集成。
20180115:利用gm获得K线数据，利用talib的技术分析工具进行指标计算（MA/RSI/MACD），利用readDFCF获得资金流信息，模拟
         DFCF计算资金流趋势、DDX。
20180117:恢复结构体成员对齐的默认状态，可能影响与dfcf有关的接口。已测试，影响不大。
20180120：利用C++的queue构建FIFO队列，记录stockdata变化情况，由技术分析线程根据该队
          列的数据进行处理,处理结果通过COPYDATA消息发送到UI窗体进行统一处理。
20180122:1、UI窗体通过COPYDATA消息获得技术分析与交易线程的处理结果。
         2、STOCK DATA 结构体包括资金流、L2TICKS、K线和技术分析结果，
		 将来扩充持仓情况？每种数据自带临界处理开关，防止访问冲突。
		 3、技术分析与交易线程分别通过独立的队列从UI线程获得拟处理的
		 命令，处理结果统一存在STOCK DATA.

				    +--------------+	
					|     DFCF     |
					|    THREAD    |
					+--------------+
					        |
             +---------------------------------+         
		  +--|          MAIN FRAME             |----------------+
		  |	 |               UI                |                |
		  |	 +---------------------------------+                |
          |                       |                             |
	+--------------+		+===========+               +---------------+
	|    TRADE     |        |   STOCK   |               |    TA         |
	|    THREAD    |        |    DATA	|				|   THREAD		|
	+--------------+		+===========+				+---------------+  

20180130:增加K线数据和对应资金流自动存盘功能
20180201：由于Ticks数据采用非4字节对齐的数据格式，RisingSun改回1字节对齐方式。
          可能影响哪个函数？掘金量化函数受到影响，改造bar结构体，固定填充部分
		  由编译器按数据类型自动对齐的部分。
20180202：1、考虑利用原来的邮件发送程序，把资金监控结果和部分自定义的核心指标算法
          放在自己的服务器运行，计算结果以邮件方式发到指定邮箱，京东量化、聚宽
		  量化等平台通过接收邮件获得部分选股参数。
		  2、可以把掘金量化3策略在VS平台设计与完善，后续需进一步搞清楚图形界面输出的
		  难题，必要时可利用ctypes等库实现c与python的紧密集成，掘金量化仅作为一个收集
		  回测数据的平台。图形显示采用mathplot库实现。
		  cython在VS015很难用，不能使用标准库。
20180427:代码优化，仅保留最需要的ticks和k cap功能，其他功能均裁剪
